{
	"info": {
		"_postman_id": "b2bba50f-9b7b-4052-a26b-b1550bf35d9a",
		"name": "Conditional workflow_Swagger",
		"description": "# üñáÔ∏è Get started here\n\nPostman's [scripting](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) feature allows you to build conditional workflows using a collection. You can branch and loop over a set of requests.\n\nThis template contains a sample conditional workflow for testing successful user creation across a data array.\n\nThe workflow is set to run in successive iterations with different values in each iteration. If the API returns a successful response in an iteration, the next iteration is triggered, and so on. You will get a report of successful user creations when all the iterations are successful. If a user creation fails, the loop is terminated, and you will get a report of the failed attempt.\n\n<img src=\"https://content.pstmn.io/d21cb133-1e04-41f6-9ef6-9aaf85df4e82/aW1hZ2UucG5n\" alt=\"Workflow%20depicting%20the%20collection%20execution\" width=\"638\" height=\"720\">\n\nThe [postman.setNextRequest()](https://learning.postman.com/docs/postman/scripts/branching-and-looping/) function enables you to change the order of requests in a collection while testing. This function allows you to conditionally skip specific requests, repeat requests, terminate the collection early, etc. You can use conditional workflows in various use cases, from [generating a Spotify playlist](https://blog.postman.com/generate-spotify-playlists-using-a-postman-collection/) to [checking your website for broken links](https://blog.postman.com/check-for-broken-links-on-your-website-using-a-postman-collection/).\n\n## üîñ **How to use this template**\n\n**Step 1:** Open the collection and click on the \"View more actions\" icon.\n\n**Step 2:** Click \"Run Collection\" to open the collection runner.  \n  \n**Step 3:** Click on \"Run Conditional Workflow\" to run the collection.\n\n#### Modifying the data\n\nYou can find the data array in the collection variables section, which you can navigate to by clicking on the collection's name in the sidebar and then selecting the Variables tab.\n\nThe data array follows this structure:\n\n``` json\n[\n    {\n        \"username\": \"\",\n        \"name\": \"\",\n        \"role\": \"\"\n    },\n    ...\n]\n\n```\n\n## ‚ÑπÔ∏è Resources\n\n[<u>Scripting in Postman</u>](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[<u>Collection runner</u>](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Pet",
			"item": [
				{
					"name": "New Request",
					"id": "b1c1c671-1af5-43ea-a023-adbbbe6deebf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"id": "8d072983-962b-4030-aede-7576c74f7ba8",
			"auth": {
				"type": "apikey",
				"apikey": {
					"value": "special-key",
					"key": "api-key"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3f886efe-1adc-4e22-a468-bc74eff12f43",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9819c410-4420-4c36-9f70-9e5f2779ea66",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Create users based on an array of data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "001291ad-9326-400d-a06b-85988840902e",
								"exec": [
									"pm.test(\"Check if request body is an array\", function () {",
									"    // Get the request body",
									"    var requestBody = pm.request.body.raw;",
									"    ",
									"    // Parse the request body as JSON",
									"    var jsonData = JSON.parse(requestBody);",
									"",
									"    // Check if the parsed data is an array",
									"    if (Array.isArray(jsonData)) {",
									"        // Send the request",
									"        pm.sendRequest({",
									"    url: 'https://petstore.swagger.io/v2/user/createWithArray',",
									"    method: 'POST',",
									"    header: 'Content-Type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(jsonData)",
									"    }",
									"  }, (err, res) => {",
									"    pm.expect(err).to.be.null;",
									"    pm.expect(res).to.have.property('code', 200);",
									"  });",
									"        }",
									"    else {",
									"        // If the request body is not an array, fail the test",
									"        pm.test(\"Request body is not an array\", function () {",
									"            pm.expect.fail(\"Request body should be an array\");",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "03d8d5f5-1772-44a0-8e36-c8b4865d9359",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1ebd2495-0838-4a2b-bb70-b5fa39e7c447",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"clientId": "test",
								"authRequestParams": [
									{
										"key": "username",
										"value": "test",
										"enabled": true,
										"send_as": "request_url"
									},
									{
										"key": "password",
										"value": "abc123",
										"enabled": true,
										"send_as": "request_url"
									}
								],
								"tokenName": "petstore_auth",
								"redirect_uri": "",
								"authUrl": "https://petstore.swagger.io/oauth/authorize",
								"grant_type": "implicit",
								"addTokenTo": "header"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": 0,\n    \"username\": \"string\",\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\",\n    \"phone\": \"string\",\n    \"userStatus\": 0\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_user}}createWithArray",
						"description": "This request creates a new user. It runs as many times as the number of elements in the data array.\n\nThe pre-request script sets the current user information in a variable and then uses that variable in the request body.\n\nThe test script takes care of storing the response and branching the execution based on the success of the request."
					},
					"response": []
				},
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d29a2d03-5a8f-4423-8dac-a5785e5c3e08",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ac233b76-e8f8-4396-8e43-6eb18791691f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"clientId": "test",
								"authRequestParams": [
									{
										"key": "username",
										"value": "test",
										"enabled": true,
										"send_as": "request_url"
									},
									{
										"key": "password",
										"value": "abc123",
										"enabled": true,
										"send_as": "request_url"
									}
								],
								"tokenName": "petstore_auth",
								"redirect_uri": "",
								"authUrl": "https://petstore.swagger.io/oauth/authorize",
								"grant_type": "implicit",
								"addTokenTo": "header"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"username\": \"alpha1\",\n  \"firstName\": \"alpha1\",\n  \"lastName\": \"test1\",\n  \"email\": \"user1@gmail.com\",\n  \"password\": \"string\",\n  \"phone\": \"12345\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}",
						"description": "If there was any failure in creating a user, this request reports the failed attempt."
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4bfe5fef-0467-4914-ba2a-e87fc2d21e4d",
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "27df2fa1-744f-4028-8d15-5fcb7cc777d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": {
								"value": "special-key",
								"key": "api-key"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"alpha1\",\r\n  \"firstName\": \"alpha\",\r\n  \"lastName\": \"beta\",\r\n  \"email\": \"kat@gmail.com\",\r\n  \"password\": \"randompasswor\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}alpha1"
					},
					"response": []
				},
				{
					"name": "Get user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d4533f3-f683-4b80-86ee-7746996de3ba",
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4539f1da-5b14-450a-a114-009a7a855552",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": {
								"value": "special-key",
								"key": "api-key"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://petstore.swagger.io/v2/user/alpha1"
					},
					"response": []
				},
				{
					"name": "Delete the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d03314e4-b57f-49bb-aa46-066067931352",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "885ec538-68d4-47e0-b1df-d21ff30cc164",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": {
								"value": "special-key",
								"key": "api-key"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_user}}alpha1",
						"description": "If all the users were created successfully, then this request reports the successful results.\n\nYou can also use the [Slack API](https://www.postman.com/slackhq/workspace/slack-api/collection/13509546-993e3b18-d277-4189-8ce5-af45df38e336), [Twilio API](https://postman.com/twilio/workspace/twilio-api/collection/12503610-194919ce-e80b-44da-8eec-45ea8e74cdfb?ctx=documentation), or the [MessageBird API](https://www.postman.com/messagebird-official/workspace/messagebird-official/collection/7989812-9fcde03c-9cfb-4293-95ea-81f53d244e75) to get notified in case of success or failure."
					},
					"response": []
				}
			],
			"id": "2410b340-1792-498c-9540-6660590e3574"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"key": "api-key",
			"value": "special-key"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "703c6003-22a1-4d38-87be-515e0359b832",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7a462ecd-54c8-4477-8e74-0031d3ba4dbd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "69d1b1fe-6f37-4b0d-a636-d94880413c58",
			"key": "users",
			"value": "[{\"username\": \"flash\",\"name\": \"Barry Allen\",\"role\": \"Superhero\"},{\"username\": \"wonder_woman\",\"name\": \"Diana Prince\",\"role\":\"Superhero\"},{\"username\": \"batman\",\"name\": \"Bruce Wayne\",\"role\": \"Superhero\"}]"
		},
		{
			"id": "8ea70e69-3e01-4cc0-aac4-859f0287aa45",
			"key": "results",
			"value": "[]",
			"type": "string"
		},
		{
			"id": "411f8f61-4f56-459d-9c58-1f80eea9b9b8",
			"key": "successAPIUrl",
			"value": "https://postman-echo.com/post",
			"type": "string"
		},
		{
			"id": "91c80f62-d97c-4c5b-8f59-aebfe3441f2a",
			"key": "failureAPIUrl",
			"value": "https://postman-echo.com/post",
			"type": "string"
		},
		{
			"id": "8c2fa3a7-314e-493f-b7e9-9500280a4b93",
			"key": "idx",
			"value": "0"
		},
		{
			"id": "917bddb7-b643-4652-bdd1-87ea7f7c70ee",
			"key": "username",
			"value": ""
		},
		{
			"id": "3071627a-8355-496f-ad58-0f5a20646082",
			"key": "name",
			"value": ""
		},
		{
			"id": "54afeea5-5289-4bcb-adc3-17a042002df0",
			"key": "role",
			"value": ""
		}
	]
}